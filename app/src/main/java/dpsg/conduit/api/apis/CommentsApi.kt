/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dpsg.conduit.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import dpsg.conduit.api.models.CreateArticleComment200Response
import dpsg.conduit.api.models.CreateArticleCommentRequest
import dpsg.conduit.api.models.GetArticleComments200Response

import dpsg.conduit.api.infrastructure.ApiClient
import dpsg.conduit.api.infrastructure.ApiResponse
import dpsg.conduit.api.infrastructure.ClientException
import dpsg.conduit.api.infrastructure.ClientError
import dpsg.conduit.api.infrastructure.ServerException
import dpsg.conduit.api.infrastructure.ServerError
import dpsg.conduit.api.infrastructure.MultiValueMap
import dpsg.conduit.api.infrastructure.RequestConfig
import dpsg.conduit.api.infrastructure.RequestMethod
import dpsg.conduit.api.infrastructure.ResponseType
import dpsg.conduit.api.infrastructure.Success

class CommentsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.realworld.io/api")
        }
    }

    /**
     * Create a comment for an article
     * Create a comment for an article. Auth is required
     * @param slug Slug of the article that you want to create a comment for
     * @param comment Comment you want to create
     * @return CreateArticleComment200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createArticleComment(slug: kotlin.String, comment: CreateArticleCommentRequest) : CreateArticleComment200Response {
        val localVarResponse = createArticleCommentWithHttpInfo(slug = slug, comment = comment)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateArticleComment200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a comment for an article
     * Create a comment for an article. Auth is required
     * @param slug Slug of the article that you want to create a comment for
     * @param comment Comment you want to create
     * @return ApiResponse<CreateArticleComment200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createArticleCommentWithHttpInfo(slug: kotlin.String, comment: CreateArticleCommentRequest) : ApiResponse<CreateArticleComment200Response?> {
        val localVariableConfig = createArticleCommentRequestConfig(slug = slug, comment = comment)

        return request<CreateArticleCommentRequest, CreateArticleComment200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createArticleComment
     *
     * @param slug Slug of the article that you want to create a comment for
     * @param comment Comment you want to create
     * @return RequestConfig
     */
    fun createArticleCommentRequestConfig(slug: kotlin.String, comment: CreateArticleCommentRequest) : RequestConfig<CreateArticleCommentRequest> {
        val localVariableBody = comment
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/articles/{slug}/comments".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a comment for an article
     * Delete a comment for an article. Auth is required
     * @param slug Slug of the article that you want to delete a comment for
     * @param id ID of the comment you want to delete
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteArticleComment(slug: kotlin.String, id: kotlin.Int) : Unit {
        val localVarResponse = deleteArticleCommentWithHttpInfo(slug = slug, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a comment for an article
     * Delete a comment for an article. Auth is required
     * @param slug Slug of the article that you want to delete a comment for
     * @param id ID of the comment you want to delete
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteArticleCommentWithHttpInfo(slug: kotlin.String, id: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = deleteArticleCommentRequestConfig(slug = slug, id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteArticleComment
     *
     * @param slug Slug of the article that you want to delete a comment for
     * @param id ID of the comment you want to delete
     * @return RequestConfig
     */
    fun deleteArticleCommentRequestConfig(slug: kotlin.String, id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/articles/{slug}/comments/{id}".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get comments for an article
     * Get the comments for an article. Auth is optional
     * @param slug Slug of the article that you want to get comments for
     * @return GetArticleComments200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getArticleComments(slug: kotlin.String) : GetArticleComments200Response {
        val localVarResponse = getArticleCommentsWithHttpInfo(slug = slug)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetArticleComments200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get comments for an article
     * Get the comments for an article. Auth is optional
     * @param slug Slug of the article that you want to get comments for
     * @return ApiResponse<GetArticleComments200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getArticleCommentsWithHttpInfo(slug: kotlin.String) : ApiResponse<GetArticleComments200Response?> {
        val localVariableConfig = getArticleCommentsRequestConfig(slug = slug)

        return request<Unit, GetArticleComments200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getArticleComments
     *
     * @param slug Slug of the article that you want to get comments for
     * @return RequestConfig
     */
    fun getArticleCommentsRequestConfig(slug: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/articles/{slug}/comments".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
