/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dpsg.conduit.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import dpsg.conduit.api.models.CreateArticle201Response
import dpsg.conduit.api.models.CreateArticleRequest
import dpsg.conduit.api.models.GetArticlesFeed200Response
import dpsg.conduit.api.models.UpdateArticleRequest

import dpsg.conduit.api.infrastructure.ApiClient
import dpsg.conduit.api.infrastructure.ApiResponse
import dpsg.conduit.api.infrastructure.ClientException
import dpsg.conduit.api.infrastructure.ClientError
import dpsg.conduit.api.infrastructure.ServerException
import dpsg.conduit.api.infrastructure.ServerError
import dpsg.conduit.api.infrastructure.MultiValueMap
import dpsg.conduit.api.infrastructure.RequestConfig
import dpsg.conduit.api.infrastructure.RequestMethod
import dpsg.conduit.api.infrastructure.ResponseType
import dpsg.conduit.api.infrastructure.Success

class ArticlesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.realworld.io/api")
        }
    }

    /**
     * Create an article
     * Create an article. Auth is required
     * @param article Article to create
     * @return CreateArticle201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createArticle(article: CreateArticleRequest) : CreateArticle201Response {
        val localVarResponse = createArticleWithHttpInfo(article = article)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateArticle201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create an article
     * Create an article. Auth is required
     * @param article Article to create
     * @return ApiResponse<CreateArticle201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createArticleWithHttpInfo(article: CreateArticleRequest) : ApiResponse<CreateArticle201Response?> {
        val localVariableConfig = createArticleRequestConfig(article = article)

        return request<CreateArticleRequest, CreateArticle201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createArticle
     *
     * @param article Article to create
     * @return RequestConfig
     */
    fun createArticleRequestConfig(article: CreateArticleRequest) : RequestConfig<CreateArticleRequest> {
        val localVariableBody = article
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/articles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an article
     * Delete an article. Auth is required
     * @param slug Slug of the article to delete
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteArticle(slug: kotlin.String) : Unit {
        val localVarResponse = deleteArticleWithHttpInfo(slug = slug)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an article
     * Delete an article. Auth is required
     * @param slug Slug of the article to delete
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteArticleWithHttpInfo(slug: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = deleteArticleRequestConfig(slug = slug)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteArticle
     *
     * @param slug Slug of the article to delete
     * @return RequestConfig
     */
    fun deleteArticleRequestConfig(slug: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/articles/{slug}".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get an article
     * Get an article. Auth not required
     * @param slug Slug of the article to get
     * @return CreateArticle201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getArticle(slug: kotlin.String) : CreateArticle201Response {
        val localVarResponse = getArticleWithHttpInfo(slug = slug)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateArticle201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get an article
     * Get an article. Auth not required
     * @param slug Slug of the article to get
     * @return ApiResponse<CreateArticle201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getArticleWithHttpInfo(slug: kotlin.String) : ApiResponse<CreateArticle201Response?> {
        val localVariableConfig = getArticleRequestConfig(slug = slug)

        return request<Unit, CreateArticle201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getArticle
     *
     * @param slug Slug of the article to get
     * @return RequestConfig
     */
    fun getArticleRequestConfig(slug: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/articles/{slug}".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get recent articles globally
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return GetArticlesFeed200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getArticles(tag: kotlin.String? = null, author: kotlin.String? = null, favorited: kotlin.String? = null, offset: kotlin.Int? = null, limit: kotlin.Int? = 20) : GetArticlesFeed200Response {
        val localVarResponse = getArticlesWithHttpInfo(tag = tag, author = author, favorited = favorited, offset = offset, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetArticlesFeed200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get recent articles globally
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return ApiResponse<GetArticlesFeed200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getArticlesWithHttpInfo(tag: kotlin.String?, author: kotlin.String?, favorited: kotlin.String?, offset: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<GetArticlesFeed200Response?> {
        val localVariableConfig = getArticlesRequestConfig(tag = tag, author = author, favorited = favorited, offset = offset, limit = limit)

        return request<Unit, GetArticlesFeed200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getArticles
     *
     * @param tag Filter by tag (optional)
     * @param author Filter by author (username) (optional)
     * @param favorited Filter by favorites of a user (username) (optional)
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return RequestConfig
     */
    fun getArticlesRequestConfig(tag: kotlin.String?, author: kotlin.String?, favorited: kotlin.String?, offset: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (tag != null) {
                    put("tag", listOf(tag.toString()))
                }
                if (author != null) {
                    put("author", listOf(author.toString()))
                }
                if (favorited != null) {
                    put("favorited", listOf(favorited.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/articles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get recent articles from users you follow
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return GetArticlesFeed200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getArticlesFeed(offset: kotlin.Int? = null, limit: kotlin.Int? = 20) : GetArticlesFeed200Response {
        val localVarResponse = getArticlesFeedWithHttpInfo(offset = offset, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetArticlesFeed200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get recent articles from users you follow
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return ApiResponse<GetArticlesFeed200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getArticlesFeedWithHttpInfo(offset: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<GetArticlesFeed200Response?> {
        val localVariableConfig = getArticlesFeedRequestConfig(offset = offset, limit = limit)

        return request<Unit, GetArticlesFeed200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getArticlesFeed
     *
     * @param offset The number of items to skip before starting to collect the result set. (optional)
     * @param limit The numbers of items to return. (optional, default to 20)
     * @return RequestConfig
     */
    fun getArticlesFeedRequestConfig(offset: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/articles/feed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update an article
     * Update an article. Auth is required
     * @param slug Slug of the article to update
     * @param article Article to update
     * @return CreateArticle201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateArticle(slug: kotlin.String, article: UpdateArticleRequest) : CreateArticle201Response {
        val localVarResponse = updateArticleWithHttpInfo(slug = slug, article = article)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateArticle201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update an article
     * Update an article. Auth is required
     * @param slug Slug of the article to update
     * @param article Article to update
     * @return ApiResponse<CreateArticle201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateArticleWithHttpInfo(slug: kotlin.String, article: UpdateArticleRequest) : ApiResponse<CreateArticle201Response?> {
        val localVariableConfig = updateArticleRequestConfig(slug = slug, article = article)

        return request<UpdateArticleRequest, CreateArticle201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateArticle
     *
     * @param slug Slug of the article to update
     * @param article Article to update
     * @return RequestConfig
     */
    fun updateArticleRequestConfig(slug: kotlin.String, article: UpdateArticleRequest) : RequestConfig<UpdateArticleRequest> {
        val localVariableBody = article
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/articles/{slug}".replace("{"+"slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
